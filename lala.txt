I have the following ROS2 launch file view_robot.launch.py:
from launch import LaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.actions import IncludeLaunchDescription, OpaqueFunction, TimerAction
from launch_ros.actions import Node
from launch.substitutions import PathJoinSubstitution, Command, FindExecutable
from launch_ros.substitutions import FindPackageShare
from launch_ros.parameter_descriptions import ParameterFile

# from launch.actions import DeclareLaunchArgument
# from launch.substitutions import LaunchConfiguration
import os
import sys
import launch
import xacro

def wait_for_user_input(context, *args, **kwargs):
    print("\n=== Please start the External Control Program on the UR5e robot ===")
    input("Press [Enter] to continue once it's started... ")
    return []


        # New ==========================================
def get_robot_description():
    joint_limit_params = PathJoinSubstitution(
        [FindPackageShare("ur_description"), "config", "ur5e", "joint_limits.yaml"]
    )
    kinematics_params = PathJoinSubstitution(
        [FindPackageShare("ur_description"), "config", "ur5e", "default_kinematics.yaml"]
    )
    physical_params = PathJoinSubstitution(
        [FindPackageShare("ur_description"), "config", "ur5e", "physical_parameters.yaml"]
    )
    visual_params = PathJoinSubstitution(
        [FindPackageShare("ur_description"), "config", "ur5e", "visual_parameters.yaml"]
    )
    robot_description_content = Command(
        [
            PathJoinSubstitution([FindExecutable(name="xacro")]),
            " ",
            PathJoinSubstitution([FindPackageShare("ur_description"), "urdf", "ur.urdf.xacro"]),
            " ",
            "robot_ip:=192.168.1.5",
            " ",
            "joint_limit_params:=",
            joint_limit_params,
            " ",
            "kinematics_params:=",
            kinematics_params,
            " ",
            "physical_params:=",
            physical_params,
            " ",
            "visual_params:=",
            visual_params,
            " ",
           "safety_limits:=",
            "true",
            " ",
            "safety_pos_margin:=",
            "0.15",
            " ",
            "safety_k_position:=",
            "20",
            " ",
            "name:=",
            "ur",
            " ",
            "ur_type:=",
            "ur5e",
            " ",
            "prefix:=",
            '""',
            " ",
        ]
    )


    robot_description = {"robot_description": robot_description_content}
    return robot_description

def get_robot_description_semantic():
    # MoveIt Configuration
    robot_description_semantic_content = Command(
        [
            PathJoinSubstitution([FindExecutable(name="xacro")]),
            " ",
            PathJoinSubstitution([
                FindPackageShare("my_robot_cell_description"),
                "srdf",
                "ur.srdf.xacro"
            ]),
            " ",
            "name:=ur"
        ]
    )
    robot_description_semantic = {
        "robot_description_semantic": robot_description_semantic_content
    }
    return robot_description_semantic
        # New ==========================================


def generate_launch_description():
    # For launching connection with ur5e
    ur_launch_file = os.path.join(
        '/opt/ros/jazzy/share/ur_robot_driver/launch',
        'ur_control.launch.py'
    )

    # New ==========================================

    kinematics_config = PathJoinSubstitution([
    FindPackageShare("my_robot_cell_description"),
    "config",
    "kinematics.yaml"
    ])

    # New ==========================================

    moveit_launch = os.path.join(
        '/opt/ros/jazzy/share/ur_moveit_config/launch',
        'ur_moveit.launch.py'
    )

    IncludeLaunchDescription(
        PythonLaunchDescriptionSource(moveit_launch),
        launch_arguments={
            'ur_type': 'ur5e',
            'launch_rviz': 'true'
        }.items()
    )

    

    # Path to the test goal publishers config
    position_goals = PathJoinSubstitution(
        #[FindPackageShare("ur_robot_driver"), "config", "test_goal_publishers_config.yaml"]
        [FindPackageShare("ur_robot_driver"), "config", "our_funny_config.yaml"]
    )
    robot_description = get_robot_description()
    robot_description_semantic = get_robot_description_semantic()
   

    return LaunchDescription([
        IncludeLaunchDescription(
            PythonLaunchDescriptionSource(ur_launch_file),
            launch_arguments={
                'ur_type': 'ur5e',
                'robot_ip': '192.168.1.5',  # ‚Üê robot IP
                # 'headless_mode': 'true'
            }.items()
        ),

        # # Delay and wait for user input
        # TimerAction(
        #     period=5.0,  # Adjust delay if needed
        #     actions=[
        #         OpaqueFunction(function=wait_for_user_input)
        #     ]
        # ),

        # MoveIt launch
        IncludeLaunchDescription(
            PythonLaunchDescriptionSource(moveit_launch),
            launch_arguments={
                'ur_type': 'ur5e',
                'launch_rviz': 'false',
                'kinematics_config': PathJoinSubstitution([
                    FindPackageShare("my_robot_cell_description"),
                    "config",
                    "kinematics.yaml"
                ])
            }.items()
        ),

        # Node(
        #     package='joint_state_publisher',
        #     executable='joint_state_publisher',
        #     name='joint_state_publisher'
        # ),

        # Node(
        #     package='move_group',
        #     executable='move_group',
        #     output='screen',
        #     parameters=[..., PathJoinSubstitution([
        #         FindPackageShare("my_robot_cell_description"),
        #         "config",
        #         "kinematics.yaml"
        #     ])]
        # ),


        # New ==========================================

        # Node(
        #     package='my_robot_cell_description',
        #     executable='move_to_joint_goal',
        #     name='move_to_joint_goal',
        #     output='screen'
        # ),

        # New ==========================================

        TimerAction(
        period=8.0,  # Increase if needed
        actions=[
        Node(
            package='group_12_motion_planning',
            executable='ur5e_moveit_controller',
            name='ur5e_moveit_controller',
            output='screen',
            parameters=[
            robot_description,
            robot_description_semantic,
            ##############new
            kinematics_config,
            ####new
        ],
        ),
        ]
        ),

       
        # Test goal publisher
        # Node(
        #     package="ros2_controllers_test_nodes",
        #     executable="publisher_joint_trajectory_controller",
        #     name="publisher_scaled_joint_trajectory_controller",
        #     parameters=[position_goals],
        #     output="screen"
        # )
    ])
    
aiming to run this cpp node ur5e_moveit_controller.cpp:
#include <memory>
#include <rclcpp/rclcpp.hpp>
#include <moveit/move_group_interface/move_group_interface.h>
#include <geometry_msgs/msg/pose.hpp>

int main(int argc, char *argv[])
{
    std::cout << "1============================================================================================1" << std::endl;

  // Initialize ROS 2
  rclcpp::init(argc, argv);
  // RCLCPP_INFO(node->get_logger(), "Main start...");
  // auto node = rclcpp::Node::make_shared("simple_moveit_motion");
  auto const node = std::make_shared<rclcpp::Node>(
    "ur5e_moveit_controller",
    rclcpp::NodeOptions().automatically_declare_parameters_from_overrides(true)
    // auto const node = rclcpp::Node::make_shared(
    // "ur5e_moveit_controller",
    // rclcpp::NodeOptions().automatically_declare_parameters_from_overrides(true)
  );
  

    // Create a ROS logger
    auto const logger = rclcpp::get_logger("ur5e_moveit_controller");
    std::cout << "2============================================================================================2" << std::endl;

    // Wait for MoveIt to initialize
    if (!rclcpp::ok()) {
        RCLCPP_ERROR(logger, "ROS shutdown while initializing");
        return 1;
    }

    // Create the MoveIt MoveGroup Interface
    // using moveit::planning_interface::MoveGroupInterface;
    std::cout << "3============================================================================================3" << std::endl;
    // auto move_group_interface = MoveGroupInterface(node, "ur_manipulator"); //change
      // Initialize MoveGroupInterface with proper error handling
    moveit::planning_interface::MoveGroupInterface move_group(node, "ur_manipulator");
    if (!move_group.getRobotModel()) {
      RCLCPP_ERROR(logger, "Failed to initialize MoveGroupInterface");
      return 1;
    }
    std::cout << "4============================================================================================4" << std::endl;
    rclcpp::sleep_for(std::chrono::seconds(10));
    std::cout << "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" << std::endl;

  // Configure planner parameters
  move_group.setPlanningTime(10.0);
  std::cout << "setPlanningTime++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" << std::endl;
  move_group.setNumPlanningAttempts(5);
  std::cout << "setNumPlanningAttemps++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" << std::endl;
  move_group.setPlannerId("PTP");
  std::cout << "setPlannerId++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" << std::endl;


    // Set a target Pose

    geometry_msgs::msg::Pose target_pose;
    target_pose.orientation.w = 1.0;
    target_pose.position.x = 0.28;
    target_pose.position.y = -0.2;
    target_pose.position.z = 0.5;


  // Verify target is reachable
  if (!move_group.setPoseTarget(target_pose)) {
    RCLCPP_ERROR(logger, "Invalid target pose");
    return 1;
  }

  // Plan and execute
  moveit::planning_interface::MoveGroupInterface::Plan plan;
  if (move_group.plan(plan) == moveit::core::MoveItErrorCode::SUCCESS) {
    RCLCPP_INFO(logger, "Planning successful, executing...");
    move_group.execute(plan);
  } else {
    RCLCPP_ERROR(logger, "Planning failed");
    return 1;
  }

  rclcpp::shutdown();
  return 0;
}


with the following underlying structure:
~/group12_ws/src$ tree
.
‚îú‚îÄ‚îÄ build
‚îÇ   ‚îú‚îÄ‚îÄ COLCON_IGNORE
‚îÇ   ‚îî‚îÄ‚îÄ move_ur5e
‚îÇ       ‚îú‚îÄ‚îÄ colcon_build.rc
‚îÇ       ‚îú‚îÄ‚îÄ colcon_command_prefix_setup_py.sh
‚îÇ       ‚îú‚îÄ‚îÄ colcon_command_prefix_setup_py.sh.env
‚îÇ       ‚îú‚îÄ‚îÄ launch
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ ur5e_moveit.launch.py -> /home/UMRobotics/group12_ws/src/move_ur5e/launch/ur5e_moveit.launch.py
‚îÇ       ‚îú‚îÄ‚îÄ package.xml -> /home/UMRobotics/group12_ws/src/move_ur5e/package.xml
‚îÇ       ‚îú‚îÄ‚îÄ prefix_override
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ __pycache__
‚îÇ       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ sitecustomize.cpython-312.pyc
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ sitecustomize.py
‚îÇ       ‚îú‚îÄ‚îÄ resource
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ move_ur5e -> /home/UMRobotics/group12_ws/src/move_ur5e/resource/move_ur5e
‚îÇ       ‚îú‚îÄ‚îÄ setup.cfg -> /home/UMRobotics/group12_ws/src/move_ur5e/setup.cfg
‚îÇ       ‚îú‚îÄ‚îÄ setup.py -> /home/UMRobotics/group12_ws/src/move_ur5e/setup.py
‚îÇ       ‚îî‚îÄ‚îÄ src
‚îÇ           ‚îú‚îÄ‚îÄ move_ur5e -> /home/UMRobotics/group12_ws/src/move_ur5e/src/move_ur5e
‚îÇ           ‚îú‚îÄ‚îÄ move_ur5e.egg-info
‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ dependency_links.txt
‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ entry_points.txt
‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ PKG-INFO
‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ requires.txt
‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ SOURCES.txt
‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ top_level.txt
‚îÇ           ‚îÇ   ‚îî‚îÄ‚îÄ zip-safe
‚îÇ           ‚îî‚îÄ‚îÄ share
‚îÇ               ‚îî‚îÄ‚îÄ move_ur5e
‚îÇ                   ‚îî‚îÄ‚îÄ hook
‚îÇ                       ‚îú‚îÄ‚îÄ pythonpath_develop.dsv
‚îÇ                       ‚îú‚îÄ‚îÄ pythonpath_develop.ps1
‚îÇ                       ‚îî‚îÄ‚îÄ pythonpath_develop.sh
‚îú‚îÄ‚îÄ group_12_motion_planning
‚îÇ   ‚îú‚îÄ‚îÄ CMakeLists.txt
‚îÇ   ‚îú‚îÄ‚îÄ include
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ group_12_motion_planning
‚îÇ   ‚îú‚îÄ‚îÄ package.xml
‚îÇ   ‚îî‚îÄ‚îÄ src
‚îÇ       ‚îú‚îÄ‚îÄ quaternion_utils.cpp
‚îÇ       ‚îú‚îÄ‚îÄ quaternion_utils.h
‚îÇ       ‚îî‚îÄ‚îÄ ur5e_moveit_controller.cpp
‚îú‚îÄ‚îÄ hello_moveit_ur
‚îÇ   ‚îú‚îÄ‚îÄ CMakeLists.txt
‚îÇ   ‚îú‚îÄ‚îÄ config
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ kinematics.yaml
‚îÇ   ‚îú‚îÄ‚îÄ include
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ hello_moveit_ur
‚îÇ   ‚îú‚îÄ‚îÄ launch
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ hello_moveit_ur_launch.py
‚îÇ   ‚îú‚îÄ‚îÄ package.xml
‚îÇ   ‚îî‚îÄ‚îÄ src
‚îÇ       ‚îî‚îÄ‚îÄ hello_moveit_ur.cpp
‚îú‚îÄ‚îÄ install
‚îÇ   ‚îú‚îÄ‚îÄ COLCON_IGNORE
‚îÇ   ‚îú‚îÄ‚îÄ local_setup.bash
‚îÇ   ‚îú‚îÄ‚îÄ local_setup.ps1
‚îÇ   ‚îú‚îÄ‚îÄ local_setup.sh
‚îÇ   ‚îú‚îÄ‚îÄ _local_setup_util_ps1.py
‚îÇ   ‚îú‚îÄ‚îÄ _local_setup_util_sh.py
‚îÇ   ‚îú‚îÄ‚îÄ local_setup.zsh
‚îÇ   ‚îú‚îÄ‚îÄ move_ur5e
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ move_ur5e
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ move_to_joint_goal
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ python3.12
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ site-packages
‚îÇ   ‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ move-ur5e.egg-link
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ share
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ ament_index
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ resource_index
‚îÇ   ‚îÇ       ‚îÇ       ‚îî‚îÄ‚îÄ packages
‚îÇ   ‚îÇ       ‚îÇ           ‚îî‚îÄ‚îÄ move_ur5e -> /home/UMRobotics/group12_ws/src/build/move_ur5e/resource/move_ur5e
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ colcon-core
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ packages
‚îÇ   ‚îÇ       ‚îÇ       ‚îî‚îÄ‚îÄ move_ur5e
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ move_ur5e
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ hook
‚îÇ   ‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ ament_prefix_path.dsv
‚îÇ   ‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ ament_prefix_path.ps1
‚îÇ   ‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ ament_prefix_path.sh
‚îÇ   ‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ pythonpath.dsv
‚îÇ   ‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ pythonpath.ps1
‚îÇ   ‚îÇ           ‚îÇ   ‚îî‚îÄ‚îÄ pythonpath.sh
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ launch
‚îÇ   ‚îÇ           ‚îÇ   ‚îî‚îÄ‚îÄ ur5e_moveit.launch.py -> /home/UMRobotics/group12_ws/src/build/move_ur5e/launch/ur5e_moveit.launch.py
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ package.bash
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ package.dsv
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ package.ps1
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ package.sh
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ package.xml -> /home/UMRobotics/group12_ws/src/build/move_ur5e/package.xml
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ package.zsh
‚îÇ   ‚îú‚îÄ‚îÄ setup.bash
‚îÇ   ‚îú‚îÄ‚îÄ setup.ps1
‚îÇ   ‚îú‚îÄ‚îÄ setup.sh
‚îÇ   ‚îî‚îÄ‚îÄ setup.zsh
‚îú‚îÄ‚îÄ log
‚îÇ   ‚îú‚îÄ‚îÄ build_2025-05-27_11-38-59
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ events.log
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logger_all.log
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ move_ur5e
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ command.log
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ stderr.log
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ stdout.log
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ stdout_stderr.log
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ streams.log
‚îÇ   ‚îú‚îÄ‚îÄ build_2025-05-27_11-44-53
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ events.log
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logger_all.log
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ move_ur5e
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ command.log
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ stderr.log
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ stdout.log
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ stdout_stderr.log
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ streams.log
‚îÇ   ‚îú‚îÄ‚îÄ COLCON_IGNORE
‚îÇ   ‚îú‚îÄ‚îÄ latest -> latest_build
‚îÇ   ‚îî‚îÄ‚îÄ latest_build -> build_2025-05-27_11-44-53
‚îú‚îÄ‚îÄ move_ur5e
‚îÇ   ‚îú‚îÄ‚îÄ launch
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ur5e_moveit.launch.py
‚îÇ   ‚îú‚îÄ‚îÄ package.xml
‚îÇ   ‚îú‚îÄ‚îÄ resource
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ move_ur5e
‚îÇ   ‚îú‚îÄ‚îÄ setup.cfg
‚îÇ   ‚îú‚îÄ‚îÄ setup.py
‚îÇ   ‚îú‚îÄ‚îÄ src
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ move_ur5e
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ move_to_joint_goal.py
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ __pycache__
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ __init__.cpython-312.pyc
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ move_to_joint_goal.cpython-312.pyc
‚îÇ   ‚îî‚îÄ‚îÄ test
‚îÇ       ‚îú‚îÄ‚îÄ test_copyright.py
‚îÇ       ‚îú‚îÄ‚îÄ test_flake8.py
‚îÇ       ‚îî‚îÄ‚îÄ test_pep257.py
‚îú‚îÄ‚îÄ my_robot_cell_description
‚îÇ   ‚îú‚îÄ‚îÄ CMakeLists.txt
‚îÇ   ‚îú‚îÄ‚îÄ config
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ calibration
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ kinematics.yaml
‚îÇ   ‚îú‚îÄ‚îÄ include
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ my_robot_cell_description
‚îÇ   ‚îú‚îÄ‚îÄ launch
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ view_robot.launch.py
‚îÇ   ‚îú‚îÄ‚îÄ meshes
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ur5e
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ collision
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ base.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ forearm.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ shoulder.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ upperarm.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ wrist1.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ wrist2.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ wrist3.stl
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ visual
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ base.dae
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ forearm.dae
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ shoulder.dae
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ upperarm.dae
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ wrist1.dae
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ wrist2.dae
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ wrist3.dae
‚îÇ   ‚îú‚îÄ‚îÄ package.xml
‚îÇ   ‚îú‚îÄ‚îÄ setup.py
‚îÇ   ‚îú‚îÄ‚îÄ src
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ my_robot_cell_description
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ move_to_joint_goal.py
‚îÇ   ‚îú‚îÄ‚îÄ srdf
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ur.srdf.xacro
‚îÇ   ‚îî‚îÄ‚îÄ urdf
‚îÇ       ‚îú‚îÄ‚îÄ inc
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ur_common.xacro
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ur_joint_control.xacro
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ur_sensors.xacro
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ ur_transmissions.xacro
‚îÇ       ‚îú‚îÄ‚îÄ ros2_control_mock_hardware.xacro
‚îÇ       ‚îú‚îÄ‚îÄ ur_macro.xacro
‚îÇ       ‚îú‚îÄ‚îÄ ur_mocked.urdf.xacro
‚îÇ       ‚îî‚îÄ‚îÄ ur.urdf.xacro
‚îú‚îÄ‚îÄ predefined_motion
‚îÇ   ‚îú‚îÄ‚îÄ CMakeLists.txt
‚îÇ   ‚îú‚îÄ‚îÄ include
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ predefined_motion
‚îÇ   ‚îú‚îÄ‚îÄ launch
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ view_robot.launch.py
‚îÇ   ‚îú‚îÄ‚îÄ meshes
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ur5e
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ collision
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ base.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ forearm.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ shoulder.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ upperarm.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ wrist1.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ wrist2.stl
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ wrist3.stl
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ visual
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ base.dae
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ forearm.dae
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ shoulder.dae
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ upperarm.dae
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ wrist1.dae
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ wrist2.dae
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ wrist3.dae
‚îÇ   ‚îú‚îÄ‚îÄ package.xml
‚îÇ   ‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ srdf
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ur.srdf.xacro
‚îÇ   ‚îî‚îÄ‚îÄ urdf
‚îÇ       ‚îú‚îÄ‚îÄ inc
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ur_common.xacro
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ur_joint_control.xacro
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ur_sensors.xacro
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ ur_transmissions.xacro
‚îÇ       ‚îú‚îÄ‚îÄ ros2_control_mock_hardware.xacro
‚îÇ       ‚îú‚îÄ‚îÄ ur_macro.xacro
‚îÇ       ‚îú‚îÄ‚îÄ ur_mocked.urdf.xacro
‚îÇ       ‚îî‚îÄ‚îÄ ur.urdf.xacro
‚îî‚îÄ‚îÄ test
    ‚îú‚îÄ‚îÄ coords10.txt
    ‚îú‚îÄ‚îÄ coords1.txt
    ‚îú‚îÄ‚îÄ coords2.txt
    ‚îú‚îÄ‚îÄ coords3.txt
    ‚îú‚îÄ‚îÄ coords4.txt
    ‚îú‚îÄ‚îÄ coords5.txt
    ‚îú‚îÄ‚îÄ coords6.txt
    ‚îú‚îÄ‚îÄ coords7.txt
    ‚îú‚îÄ‚îÄ coords8.txt
    ‚îú‚îÄ‚îÄ coords9.txt
    ‚îú‚îÄ‚îÄ save_tf_and_joint_states.py
    ‚îî‚îÄ‚îÄ test.py

